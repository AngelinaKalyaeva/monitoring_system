-- MySQL Script generated by MySQL Workbench
-- Thu Mar 15 12:25:33 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`good`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`good` (
                                             `id` INT NOT NULL AUTO_INCREMENT,
                                             `name` VARCHAR(45) NOT NULL,
    `price` DECIMAL(13,2) NOT NULL,
    `description` VARCHAR(255) NULL,
    `number` INT,
    PRIMARY KEY (`id`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`group` (
                                              `id` INT NOT NULL AUTO_INCREMENT,
                                              `name` VARCHAR(45) NOT NULL,
    PRIMARY KEY (`id`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`user` (
                                             `id` INT NOT NULL AUTO_INCREMENT,
                                             `name` VARCHAR(45) NOT NULL,
    `password` VARCHAR(32) NOT NULL,
    `blacklisted` TINYINT(1) NOT NULL,
    `group_id` INT NOT NULL,
    `email` VARCHAR(45) NOT NULL,
    PRIMARY KEY (`id`, `group_id`),
    INDEX `fk_Users_Groups1_idx` (`group_id` ASC),
    UNIQUE INDEX `email_UNIQUE` (`email` ASC),
    CONSTRAINT `fk_Users_Groups1`
    FOREIGN KEY (`group_id`)
    REFERENCES `mydb`.`group` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mydb`.`order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`order` (
                                              `id` INT NOT NULL AUTO_INCREMENT,
                                              `user_id` INT NOT NULL,
                                              `address` VARCHAR(500) NOT NULL,
    PRIMARY KEY (`id`, `user_id`),
    INDEX `fk_Orders_Users1_idx` (`user_id` ASC),
    CONSTRAINT `fk_Orders_Users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `mydb`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`ordered_good`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`ordered_good` (
                                                     `order_id` INT NOT NULL,
                                                     `good_id` INT NOT NULL,
                                                     `number` INT NOT NULL,
                                                     `price` DECIMAL(13,2) NOT NULL,
    PRIMARY KEY (`order_id`, `good_id`),
    INDEX `fk_Orders_has_Goods_Goods1_idx` (`good_id` ASC),
    INDEX `fk_Orders_has_Goods_Orders_idx` (`order_id` ASC),
    CONSTRAINT `fk_Orders_has_Goods_Orders`
    FOREIGN KEY (`order_id`)
    REFERENCES `mydb`.`order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_Orders_has_Goods_Goods1`
    FOREIGN KEY (`good_id`)
    REFERENCES `mydb`.`good` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`status_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`status_type` (
                                                    `id` INT NOT NULL AUTO_INCREMENT,
                                                    `name` VARCHAR(45) NOT NULL,
    UNIQUE INDEX `name_UNIQUE` (`name` ASC),
    PRIMARY KEY (`id`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`status`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`status` (
                                               `order_id` INT NOT NULL,
                                               `status_type_id` INT NOT NULL,
                                               `changed` TIMESTAMP(0) NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (`order_id`, `status_type_id`),
    INDEX `fk_Orders_has_Event_types_Event_types1_idx` (`status_type_id` ASC),
    INDEX `fk_Orders_has_Event_types_Orders1_idx` (`order_id` ASC),
    CONSTRAINT `fk_Orders_has_Event_types_Orders1`
    FOREIGN KEY (`order_id`)
    REFERENCES `mydb`.`order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_Orders_has_Event_types_Event_types1`
    FOREIGN KEY (`status_type_id`)
    REFERENCES `mydb`.`status_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


START TRANSACTION;
USE `mydb`;
INSERT INTO `good` (`name`,`price`, `description`, `number`) VALUES ('Cardigan for men The North Face Surgent', 4999, 'Convenient technological hudy from The North Face - an excellent choice for outdoor activities and hikes.', 1000);
INSERT INTO `good` (`name`,`price`, `description`, `number`) VALUES ('Cardigan for men Termit', 349, 'Male snowboard jumper from Termit.', 1000);
INSERT INTO `good` (`name`,`price`, `description`, `number`) VALUES ('Cardigan for men Glissade', 649, 'Men\'s cardigan for skiing from Glissade.', 1000);
INSERT INTO `good` (`name`,`price`, `description`, `number`) VALUES ('Cardigan for men Nike Dry', 1999, 'Male jumper for training from Nike.', 1000);
INSERT INTO `good` (`name`,`price`, `description`, `number`) VALUES ('Cardigan for men Termit', 499, 'Comfortable men\'s snowboard jumper.', 1000);
INSERT INTO `good` (`name`,`price`, `description`, `number`) VALUES ('Cardigan for men Demix', 1849, 'A warm sports jumper from Demix is an excellent choice for cool weather.', 1000);
INSERT INTO `good` (`name`,`price`, `description`, `number`) VALUES ('Sweatshirt for women Glissade', 449, 'A practical jumper from Glissade is an excellent choice for skiing.', 1000);
INSERT INTO `good` (`name`,`price`, `description`, `number`) VALUES ('Cardigan for women Kappa', 1499, 'A sweatshirt with a zipper from Kappa will perfectly fit into your sports wardrobe.', 1000);
INSERT INTO `good` (`name`,`price`, `description`, `number`) VALUES ('Cardigan for women Termit', 349, 'Female snowboard jumper from Termit.', 1000);
INSERT INTO `good` (`name`,`price`, `description`, `number`) VALUES ('Sweatshirt for women Glissade', 649, 'Female fleece sweater Glissade is suitable for skiing.', 1000);
COMMIT;

START TRANSACTION;
USE `mydb`;
INSERT INTO `group` (`name`) VALUES ('Client');
INSERT INTO `group` (`name`) VALUES ('Admin');
COMMIT;

START TRANSACTION;
USE `mydb`;
INSERT INTO `user` (`name`, `password`, `blacklisted`, `group_id`, `email`) VALUES ('Elvis Presley', '123', FALSE, 1, 'Elvis@gmail.com');
INSERT INTO `user` (`name`, `password`, `blacklisted`, `group_id`, `email`) VALUES ('Muddy Waters', 'asdo2pt5', FALSE, 1, 'Muddy@gmail.com');
INSERT INTO `user` (`name`, `password`, `blacklisted`, `group_id`, `email`) VALUES ('Janis Joplin', 'dfjvk7df9', FALSE, 1, 'Janis@gmail.com');
INSERT INTO `user` (`name`, `password`, `blacklisted`, `group_id`, `email`) VALUES ('Jack Leroy Wilson', '123', FALSE, 2, 'Jack@gmail.com');
COMMIT;

START TRANSACTION;
USE `mydb`;
INSERT INTO `status_type` (`name`) VALUES ('new');
INSERT INTO `status_type` (`name`) VALUES ('on the way');
INSERT INTO `status_type` (`name`) VALUES ('waiting for payment');
INSERT INTO `status_type` (`name`) VALUES ('ready');
INSERT INTO `status_type` (`name`) VALUES ('finished');
INSERT INTO `status_type` (`name`) VALUES ('canceled');
COMMIT;
